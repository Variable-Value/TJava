/* Drug.t
*/
package org.conceptcomputing.pharacologicCalc.dosage;

/** drug class for
    "Procedure 1 - Dosage and Concentration: Drug Stock Solutions",
    from Ronald J. Tallarida and Rodney B. Murray, 
    <em>Manual of Pharmacologic Calculations</em>, Springer-Verlog, New York, 
    1987??, pp. 3-7.
*/
public serial class Drug {
   unique(ID);
   public String ID;
   public float molWgt { molWgt > 0; }
   public int numIons { numIons >=0; numIons <= 5; }
   
   public boolean isElectrolyte {isElectrolyte = (numIons > 1 ion);}
   public float dissociationFactor;
   public float NaClEquivalent {
      NaClEquivalent = (NaCl.molWgt / NaCl.dissociationFactor)  // numerator
                     / (this.molWgt / this.dissociationFactor); // denominator
   }

   constraint constrainDissociationFactor { 
      // could have been stated with dissociationFactor definition
      if (isElectrolyte) {
         dissociationFactor = .2 + .8 * numIons;
      } else {
         dissociationFactor = 1.0;
      }
   } 

// Constructors
   public Drug();

   public Drug(ID, molWgt, numIons) {
      this.ID = ID;
      this.molWgt = molWgt; 
      this.numIons = numIons;
      constraint(isElectrolyte);
      constraint(NaClEquivalent);
      constraint(constrainDissociationFactor);
   }
// Predefined compounds Drugs
   public Drug NaCl = new Drug {
      "NaCl",    // ID
      58.44247, // molWgt = Na.atomWgt + Cl.atomWgt
      2         // numIons
   }

   test false {
      Drug d = new Drug("test", 2, 2);
      d.molWgt = 4.0; // cannot be set to 4.0 because already set to 2.0, 
                      // 4.0 != 2.0, therefore overconstrained
   }
   test true  {int openNumIons; Drug d = new Drug("test", 3, openNumIons);}
   test false {Drug d = new Drug("test", 3, 6);} // numIons >5
   test true  {Drug d = new Drug("test", 3, 5);}
   test false {
      Drug d = new Drug() {
         isElectrolyte; // d.isElectrolyte is set to true
                        // d.isElectrolyte constraint is underspecified
         numIons = 0;   // d.numIons is set to 0
                        // d.numIons constraint is true
                        // d.isElectrolyte constraint is false
      }
   }
   test false  {
    Drug d = new Drug() {numIons = 0}
      // d.numIons is set to 0
      // d.numIons constraint is underspecified, OK
      // d.isElectrolyte is set to false by constraint
    d.electrolyte; // same as    d.electrolyte=true;
      // d.electrolyte is overconstrained, cannot be both true and false
   }
   test false { 
      Drug d = new Drug() {numIons = 2 ions}
      ! d.electrolyte;
   }
   test false  {  
      Drug d = new Drug() {numIons = 3 ions}
         // d.numIons is set to 3
         // d.electrolyte is set to true
         // d.dissociationFactor is set to
         //    .2 + .8 * numIons = .2 + .8 * 3 = 2.6
      d.dissociationFactor = 2.8;
   }
   test false  {  
      Drug d = new Drug() {dissociationFactor = 2.6;}
         // d.dissociationFactor is set to 2.8
      numIons = 3 ions;
         // d.numIons is set to 3
         // d.electrolyte is set to true
         // d.dissociatinFactor = .2 + .8 * numIons = 2.6,
         //    but because of rounding error this does not equal exactly 2.6
         //    therefore overspecified
   }
   test false  {  
      Drug d = new Drug() {
         dissociationFactor = 2.6; 
         dissociationFactor.tolerance = .01 // tolerance defaults to 0
      }
      numIons = 3 ions;
         // d.numIons is set to 3
         // d.electrolyte is set to true
         // d.dissociatinFactor = .2 + .8 * numIons,
         //    this is within tollerance of 2.6, OK
   }
   test true  {  
      Drug d1 = new Drug() {
         dissociationFactor = 2.9; // d1.dissociationFactor.value is set to 2.9
         dissociationFactor.tollerance = .2;
      }
      Drug d2 = new Drug() {
         numIons = 3;
            // d2.numIons is set to 3
            // d2.electrolyte is set to true
            // d2.dissociatinFactor is set to .2 + .8 * numIons = 2.6
         dissociationFactor.tollerance = .2;
      }
      d1.dissociationFactor = d2.dissociationFactor;
         // tollerance ranges overlap, OK
   }
   test true {NaCl.isElectrolyte}
   test 58.44247(+-.0001) {result = NaCl.molWgt}
   test 1.0(+-0.01) {result = NaCl.dissociationFactor}
   test 1.0(+-0.01) {result = NaCl.NaClEquivalent}
   test 2.0(+-.2) {
      Drug d = new Drug(numIons = 2 ions);
      result = d.dissociationFactor;
      d.dissociationFactor.tollerance = .0001;
      // overlap with test numbers is OK
   }
   test "Factor for 2 ions" 1.8(+-.001)  {  
      Drug d = new Drug(numIons = 2 ions);
      result = d.dissociationFactor;
   }
   
   test "phenylephrine hydrochloride" true {  // suite
      Drug d = new Drug() { 
         ID = "phenylephrine hydrochloride";
         molWgt = 204 grEquiv;
         numIons = 2 ions;
      }
      test 1.8       {result = d.dissociationFactor}
      test 0.29 gm   {result = d.NaClEquivalent}
   }
   test "test suite" { // invoke by using 
                       // java pharacologicCalc.dosage.TestDrug "test suite"
      test "Factor for 2 ions";
      test "phenylephrine hydrochloride";
   }
} // end class Drug
