package tlang;

import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.eclipse.jdt.annotation.Nullable;
import tlang.Scope.VarInfo;
import static tlang.TLantlrParser.*;
import static tlang.TUtil.*;

/** Visitor for syntactical context checking of parsed T programs, sometimes
 * called a "semantic check". Operates on a syntax oriented parse
 * tree generated by Antlr. The ContextCheckVisitor also generates a scopeMap that holds the scope
 * object associated with each executable or block.
 * <p>
 * All the work is done when the constructor is invoked. First the FieldVisitor is invoked, then
 * the context checking begins.
 */
public class ContextCheckVisitor extends TLantlrBaseVisitor<Void> {

private static final String $T$ = TLantlrRewriteVisitor.$T$;
private static final String invalidCharsMsg
      = $T$ +" is reserved for T language internal use only";

/** Is Context in code with statements, i.e., method, constructor, or initializer, but not field
 * initialization */
private boolean isInExecutable = false;

/** Is Context in non-executable logic statement, e.g., constraint or means, but not conjecture */
private boolean isInLogic = false;

/** Are we in executable code nested within a conditional statement, e.g., then-block or else-block
 * of an if-then-else? */
enum BranchState { InitialBranch, FollowingBranch, NotInsideConditionalStatement }
BranchState branchState = BranchState.NotInsideConditionalStatement;

private boolean isInInsideConditionalStatement() {
  return branchState != BranchState.NotInsideConditionalStatement;
}

private static final HashSet<String> EMPTY_HASH_SET = new HashSet<>(0);
private HashSet<String> nestedValueNames = EMPTY_HASH_SET;

/** Is Context in the construction of a name of a variable or value for
 * assignment, i.e., assignable (LHS) or method parameter
 */
private boolean isInAssignment = false;

private static final String program = "Context Check";
Map<RuleContext, Scope> scopeMap;
public Map<RuleContext, tlang.Scope> getScopeMap() { return scopeMap; }

CollectingMsgListener errs;
Scope currentScope = null;

//@formatter:off
private String packageName = ""; // in case there is no package
  public String getPackageName() { return packageName; }

private String topTypeName = ""; // "" means thisIsTheTopLevelType()
  public String getTopTypeName() { return topTypeName; }
  private boolean thisIsTheTopLevelType() { return topTypeName.equals(""); }

//@formatter:on

public ContextCheckVisitor(
  ParseTree tree,
  CollectingMsgListener msgListener,
  Map<RuleContext, Scope> scopeMap)
{
  this.errs = msgListener;
  this.scopeMap = scopeMap;
  new FieldVisitor(program, errs, scopeMap).visit(tree);
}


public String getCompoundTypeName() {
  if (packageName.length() > 0 && topTypeName.length() > 0) {
    return packageName +"."+ topTypeName;
  } else {
    return topTypeName; // may be ""
  }
}

@Override
public Void visitT_packageDeclaration(T_packageDeclarationContext ctx) {
  packageName = ctx.t_qualifiedName().getText();
  // return visitChildren(ctx); // no changes to package, no need to visit
  return null;
}

@Override
public Void visitT_classDeclaration(T_classDeclarationContext ctx) {
  String className = checkedText(ctx.UndecoratedIdentifier());
  typeDeclarationVisit(className, ctx);
  return null;
}

@Override
public Void visitEnumDeclaration(EnumDeclarationContext ctx) {
  String enumName = ctx.Identifier().toString();
  typeDeclarationVisit(enumName, ctx);
  return null;
}

@Override
public Void visitT_interfaceDeclaration(T_interfaceDeclarationContext ctx) {
  String interfaceName = checkedText(ctx.UndecoratedIdentifier());
  typeDeclarationVisit(interfaceName, ctx);
  return null;
}

@Override
public Void visitAnnotationTypeDeclaration(AnnotationTypeDeclarationContext ctx) {
  String annotationName = ctx.Identifier().toString();
  if (thisIsTheTopLevelType())
    topTypeName = annotationName;

  // Do not visitChildren(ctx); We make no changes to an AnnotationType
  return null;
}

/** Check the Condition, then-block, and any else block for errors as separate executables, and
 * check that any varNames defined in one of the executable blocks is also defined in the other.
 * <p>
 * A then block at the top level code statements needs to record the new value names assigned. Any
 * else block then needs a fresh copy of that list to make sure it assigns exactly the same value
 * names. The reason it needs a fresh copy is because it checks off the value names assigned by
 * deleting them from the list. Note that an else if clause also needs a fresh copy of the list. */
@Override
public Void visitIfStmt(IfStmtContext ctx) {
  visitChildren(ctx.t_parExpression());

  BranchState holdBranchState = branchState;

  if (branchState == BranchState.InitialBranch) // if-statement is nested in initial branch
    checkIfBranches(ctx);
  else if (branchState == BranchState.FollowingBranch) // if-statement is nested in following branch
    checkIfBranches(ctx);
  else // if-statement is not nested in another conditional branch
    checkIfBranches(ctx);

  branchState = holdBranchState;
  return null;
}
/**
 * @param ctx
 */
private void checkIfBranches(IfStmtContext ctx) {
  InitialConditionalBranchScope thenScope = checkFirstBranch(ctx);
  if (ctx.t_statement(1) != null)
    checkFollowingBranch(ctx, thenScope);
  else
    issueMissingValueNameMessages(ctx, thenScope.getCloneOfDelegatedValueNames());
  thenScope.setCollectionsToEmpty();
}

/**
 * @param ctx
 * @return
 */
private InitialConditionalBranchScope checkFirstBranch(IfStmtContext ctx) {
  BranchState holdBranchState = branchState;
  branchState = BranchState.InitialBranch;

  String clauseId = idWithLineCharacter("then", ctx.t_statement(0).getStart());
  InitialConditionalBranchScope thenScope
      = new InitialConditionalBranchScope(clauseId, currentScope);

  Scope holdScope = currentScope;
  currentScope = thenScope;
  visitCodeScope(ctx.t_statement(0));
  currentScope = holdScope;

  thenScope.setEndingValueNames();

  branchState = holdBranchState;
  return thenScope;
}

private void checkFollowingBranch(
      IfStmtContext ctx,
      InitialConditionalBranchScope thenScope) {
  BranchState holdBranchState = branchState;
  branchState = BranchState.FollowingBranch;

  ParserRuleContext elseCtx = ctx.t_statement(1);
  thenScope.reestablishEnclosingScopeValues();
  String clauseId = idWithLineCharacter("else", elseCtx.getStart());
  FollowingConditionalBranchScope elseScope
        = new FollowingConditionalBranchScope(clauseId, thenScope.getParent(), thenScope);

  Scope holdScope = currentScope;
  currentScope = elseScope;
  visitCodeScope(elseCtx);
  currentScope = holdScope;

  issueMissingValueNameMessages(ctx, elseScope.getNestedValueNames());
  thenScope.captureConflictingEndingValueNames();
  /* We leave the current value names of the variables at their ending values for the (last)
   * following branch */

  branchState = holdBranchState;
  elseScope.setCollectionsToEmpty();
}

/** Issue and error message for any names that were defined in the first branch and not also defined
 * in the following branch */
private void issueMissingValueNameMessages(IfStmtContext ctx, Set<String> undefinedNames) {
  for (String valueName : undefinedNames) {
    String msg = "The value name "+ valueName + " was not defined in the else-clause";
    errs.collectError(program, ctx.getStop(), msg);
  }
}

/** Check for incorrectly decorated value name or a field name that has already been used. The
 * variable name, value name, and line number have already been collected into the varInto by the
 * {@link FieldVisitor}.
 * <p>
 * {@inheritDoc} */
@Override
public Void visitInitializedField(InitializedFieldContext ctx) {
  final Token varOrValueNameToken = ctx.t_idDeclaration().getStart();
  final String varName = TUtil.variableName(varOrValueNameToken);
  VarInfo varInfo = currentScope.varToInfoMap.get(varName);
  checkForDecorationErrors(varOrValueNameToken);
  checkForAlreadyDeclared(varOrValueNameToken, varName, varInfo);
  return visitChildren(ctx);
}


  private void checkForDecorationErrors(final Token varOrValueNameToken) {
    if (isMidDecorated(varOrValueNameToken)) {
      collectErrorForMidDecoratedField(varOrValueNameToken);
    } else if (isUndecorated(varOrValueNameToken)) {
      collectErrorForUndecoratedField(varOrValueNameToken);
      defineValueToMakeFollowingMessagesMoreUseful(varOrValueNameToken);
    }
  }

  private void collectErrorForMidDecoratedField(final Token varOrValueNameToken) {
    final String msg = String.format
        ("Field declaration %s cannot be mid-decorated", varOrValueNameToken.getText());
    errs.collectError(program, varOrValueNameToken, msg);
  }

private void collectErrorForUndecoratedField(final Token varOrValueNameToken) {
  final String msg = String.format("Must use a decorated value name if the field %s is initialized",
                                   varOrValueNameToken.getText());
  errs.collectError(program, varOrValueNameToken, msg);
}

  private void defineValueToMakeFollowingMessagesMoreUseful(final Token varOrValueNameToken) {
    String varOrValueName = varOrValueNameToken.getText();
    final String varName = variableName(varOrValueName);
    VarInfo varInfo = currentScope.varToInfoMap.get(varName);
  varInfo.defineNewValue("'" + varName, varOrValueNameToken.getLine());
}

/**
 * Check for an already declared variable with the same name. The variable name, value name, and
 * line number have already been collected into the varInfo by the {@link FieldVisitor}.
 * <p>{@inheritDoc}
 */
@Override public Void visitUninitializedField(UninitializedFieldContext ctx) {
  final Token varOrValueNameToken = ctx.t_idDeclaration().getStart();
  final String varName = TUtil.variableName(varOrValueNameToken);
  VarInfo varInfo = currentScope.varToInfoMap.get(varName);
  checkForAlreadyDeclared(varOrValueNameToken, varName, varInfo);
  return visitChildren(ctx);
}

private void checkForAlreadyDeclared(Token varOrValueNameToken, String varName, VarInfo varInfo) {
  final int lineOfExistingVar = varInfo.getLineWhereDeclared();
  if (lineOfExistingVar != varOrValueNameToken.getLine()) {
    String template = "The field %s was already declared at line %d";
    String msg = String.format(template, varName, lineOfExistingVar);
    errs.collectError(program, varOrValueNameToken, msg);
  }
}

@Override
public Void visitT_methodDeclaration(T_methodDeclarationContext ctx) {
  final Token methodNameToken = ctx.UndecoratedIdentifier().getSymbol();
  final String methodId = idWithLC("method", methodNameToken.getText(), methodNameToken);
  executableVisit(methodId, ctx);
  return null;
}

@Override
public Void visitT_initializer(T_initializerContext ctx) {
  final String initializerId = idWithLineCharacter("initializer", ctx.getStart());
  executableVisit(initializerId, ctx);
  return null;
}

@Override
public Void visitT_constructorDeclaration(T_constructorDeclarationContext ctx) {
  final String constructorId = idWithLineCharacter("constructor", ctx.UndecoratedIdentifier().getSymbol());
  executableVisit(constructorId, ctx);
  return null;
}

/** An identifier for a token constructed from the prependString, the line that the forToken is on,
 * and the position in the line for the first character of the forToken. For implementation reasons
 * the line number starts counting with one, but the character position in the line starts counting
 * with zero. Example: the identifier for the starting token of a block might be
 * <code>block-L24C4</code>. */
private String idWithLineCharacter(String prependString, Token forToken) {
  return idWithLC(prependString, "", forToken);
}

/** An identifier for a token constructed from the prependString, the line that the forToken is on,
 * the position in the line for the first character of the forToken, and an appendString. For
 * implementation reasons the line number starts counting with one, but the character position in
 * the line starts counting with zero. Example: the identifier for a method might be
 * <code>method-L24C12-toString</code>. */
private String idWithLC(String prependString, String appendString, Token forToken) {
  int line = forToken.getLine();
  int charPosition = forToken.getCharPositionInLine();
  return prependString + "-L" + line + "C" + charPosition + "-" + appendString;
}

/** Visit the code contained in an executable, that is, a method, constructor, or the object's
 * initializer blocks.
 * <p>
 * The complication is that we have to make a fresh copy of the field-level scope information for
 * each executable. This is because in a scope, its variable information is the place that we need
 * to keep the value information for that variable, even if the value is assigned in an enclosed
 * scope; values that are assigned to a variable in
 * an enclosed scope continue to exist after the enclosed scope ends, so the name of the value
 * continues to exist in the variables scope object. But for the object's fields, this creates a
 * problem.
 * <p>
 * In order to make status statements in an executable independent of other executables, the
 * executable must assume only the information about fields that is in the object level constraints,
 * which means that that the executable has no knowledge of the exact values assigned to the fields
 * by other executables. Therefore, to keep the field values and names assigned in executables
 * separate, each executable starts with a fresh copy of the field scope as its enclosing scope,
 * which we call the background scope, and it holds only the starting value names for each field.
 *
 * @param id
 *                          a unique name for the executable, for use in error messages
 * @param executableContext
 */
private void executableVisit(String id, ParserRuleContext executableContext) {
  final Scope grandParent = currentScope; // push

  BackgroundScope backgroundParent = new BackgroundScope("background-" + id, grandParent);
  currentScope = new Scope(id, backgroundParent);
  visitCodeScope(executableContext);
  backgroundParent.clearForCodeGeneration();

  currentScope = grandParent; // pop
}


/** Perform tasks common to all new executable scopes.
 * @param ctx         The parse context for the executable scope that is visited
 * @param parentScope The enclosing scope, normally the global <code>currentScope</code> */
private void visitCodeScope(ParserRuleContext ctx) {
  scopeMap.put(ctx, currentScope);
  boolean enclosingIsInExecutable = isInExecutable;
  isInExecutable = true;

  visitChildren(ctx);

  isInExecutable = enclosingIsInExecutable;
  currentScope.clearForCodeGeneration();
}

@Override
public Void visitT_block(T_blockContext ctx) {
  final Token firstToken = ctx.getStart();
  final int startingChar = firstToken.getCharPositionInLine();
  String blockLabel = "block_L" + firstToken.getLine() + "C" + startingChar;
  final Scope parent = currentScope;
  currentScope = new Scope(blockLabel, parent);
  scopeMap.put(ctx, currentScope);

  visitChildren(ctx);

  currentScope.clearForCodeGeneration();
  currentScope = parent;
  return null;
}

@Override
public Void visitAssignStmt(AssignStmtContext ctx) {
  /* we reverse the order of visiting the children because assignment happens after the expression
   * is evaluated. This is important because we don't want to change the current value in the
   * variable info until the end of the assignment. */
  visit(ctx.t_expression());
  visit(ctx.t_assignable());
  return null;
}

/** Translate the expression that names the value that is being calculated, e.g., the right-hand
 * side value name in an assignment.  */
@Override
public Void visitT_assignable(T_assignableContext ctx) {
  final boolean oldInAssignment = isInAssignment;
  isInAssignment = true;

  visitChildren(ctx);

  isInAssignment = oldInAssignment;
  return null;
}

/** {@inheritDoc} */
@Override
public Void visitT_initializedVariableDeclaratorId(T_initializedVariableDeclaratorIdContext ctx) {
  final T_idDeclarationContext declCtx = ctx.t_idDeclaration();
  final Token valueNameToken = declCtx.getStart();
  String valueName = valueNameToken.getText();
  if (isMidDecorated(valueNameToken)) {
    errs.collectError(program, valueNameToken, "Variable declarations cannot be mid-decorated");
  } else if (isUndecorated(valueNameToken)) {
    errs.collectError(program, valueNameToken,
                      "Initialized variable declarations must be decorated");
    // hoping to improve err msgs for following code:
    valueName = "'" + valueName;
  }
  Optional<VarInfo> newVarInfo = currentScope.declareVarName(valueNameToken, declCtx.idType);
  if (isMissing(newVarInfo))
    recoverFromRedeclaredVariable(valueNameToken);
  return null;
}

/** Issue error message, but then treat this as though it were a new value name in hopes of finding
 * more useful errors */
private void recoverFromRedeclaredVariable(final Token valueNameToken) {
  String valueName = valueNameToken.getText();
  String varName = variableName(valueName);
  VarInfo existingVarInfo = currentScope.getConflictingVarDeclarationInfo(varName);
  String msg = "Attempted to declare variable "+ varName
              +", but it was already declared at line "+  existingVarInfo.getLineWhereDeclared();
  errs.collectError(program, valueNameToken, msg);
  defineTheValueNameRegardlessOfErrors(valueNameToken, existingVarInfo);
}

@Override
public Void
visitT_uninitializedVariableDeclaratorId(T_uninitializedVariableDeclaratorIdContext ctx) {
  final T_idDeclarationContext declCtx = ctx.t_idDeclaration();
  final Token varNameToken = declCtx.getStart();
  if (isDecorated(varNameToken))
    errs.collectError(program, varNameToken,
                      "A variable declaration may not be decorated unless it is initialized");
  Optional<VarInfo> varInfo = currentScope.declareVarName(varNameToken, declCtx.idType);
  if  (isMissing(varInfo))
    recoverFromRedeclaredVariable(varNameToken);
  return null;
}

@Override
public Void visitT_means(T_meansContext ctx) {
  final boolean oldInLogic = isInLogic;
  isInLogic = true;

  visitChildren(ctx);

  isInLogic = oldInLogic;
  return null;
}

@Override
public Void visitT_expression(T_expressionContext ctx) {
  final boolean oldInAssignment = isInAssignment;
  isInAssignment = false;

  visitChildren(ctx);

  isInAssignment = oldInAssignment;
  return null;
}

@Override
public Void visitT_identifier(T_identifierContext ctx) {
  final Token idToken = ctx.start;
  checkForReservedChars(idToken);

  // TODO: try removing next line. Isn't isInExecutable sufficient?
  if (currentScope != null)  // i.e., we are inside a type definition
    if (isInExecutable)
      if (isInAssignment)
        checkAssignment(ctx);
      else
        checkReference(ctx);

  visitChildren(ctx);
  return null;
}


// *************** Helper methods *******************************

public void typeDeclarationVisit(String typeName, ParserRuleContext ctx) {
  // Assumption: field visitor has created a Scope object and loaded it
  // with class fields (and their value names if they were initialized) but it has not
  // filled in the parent scope for that Scope object except for the instance of the top level type.
  // We let the Java compiler check for a single visible top-level type per file.
  final Scope parent = currentScope;

  if (thisIsTheTopLevelType())
    topTypeName = typeName;
  currentScope = typeScope(typeName, ctx, parent);

  visitChildren(ctx);

  currentScope.clearForCodeGeneration();
  currentScope = parent; // pop
}

/** Use the class scope saved from the field Visitor for this rule context or create a new scope for
 * this type. */
private Scope typeScope(String typeName, ParserRuleContext ctx, final Scope parent) {
  final Scope savedClassScopeFromFieldVisitor = scopeMap.get(ctx);
  if (savedClassScopeFromFieldVisitor == null) {
    Scope newScopeForType = new Scope(typeName, parent);
    scopeMap.put(ctx, newScopeForType);
    return newScopeForType;
  } else {
    setParentIfInnerClass(savedClassScopeFromFieldVisitor, parent);
    return savedClassScopeFromFieldVisitor;
  }
}

private void setParentIfInnerClass(Scope possibleInnerClass, Scope parent) {
  if (isInnerClass(possibleInnerClass))
    possibleInnerClass.setParent(parent);
}
private boolean isInnerClass(Scope possibleInnerClass) {
  return possibleInnerClass.parent == null;
}

//@formatter:off
//The rest of the program has not been checked for preserving readability

/** Check for possible values in a value name that is being assigned a value.
 * @implementation We Define the new value name, even if there was an error, in hopes of finding
 *                 additional useful errors. If there was not a valid value name, we construct one
 *                 to work with.
 */
private void checkAssignment(T_identifierContext ctx) {
  Token valueNameToken = ctx.start;
  final VarInfo varInfo = ensureVarInfo(valueNameToken);

  if (branchState == BranchState.InitialBranch) {

    checkForAlreadyFinalValue(valueNameToken, varInfo);
    InitialConditionalBranchScope firstScope = getEnclosingInitialScope(valueNameToken);
    checkForPriorDefinitionOfValueName(valueNameToken, varInfo);
//    firstScope.preserveAnyEnclosingScopeLatestValue(variableName(valueNameToken));
    String valueName = workingValueName(valueNameToken);
    setDeligationObligationForEnclosingScopes(firstScope, valueName, varInfo.getCurrentValueName());
    defineTheValueNameRegardlessOfErrors(valueNameToken, varInfo);

  } else if (branchState == BranchState.FollowingBranch) {

    FollowingConditionalBranchScope followingScope = getEnclosingFollowingScope(valueNameToken);
    String valueName = workingValueName(valueNameToken);
    if ( ! followingScope.getNestedValueNames().remove(valueName))
      errs.collectError(program, valueNameToken, "Value name "+ valueName
                      +" must also be defined in the initial branch of the conditional statement");
    //firstScope.checkForOverwritingEnclosingScopeValue(varName); // TODO: remove this line
    defineTheValueNameRegardlessOfErrors(valueNameToken, varInfo);
  } else {
    checkForAlreadyFinalValue(valueNameToken, varInfo);
    checkForPriorDefinitionOfValueName(valueNameToken, varInfo);
    defineTheValueNameRegardlessOfErrors(valueNameToken, varInfo);
  }
}

/** Conditional statement handling of valueNames gets complicated. We create a new valueName anytime
 * we assign a value to a variable, and that valueName is used later in the code to represent the
 * value. If the assignment is in a branch of a conditional statement, we must therefore make the
 * valueName available to statements that follow the conditional, but that implies that all paths
 * through the conditional must assign a value to the valueName. So if we assign a value to a new
 * valueName inside any branch of a conditional statement, then all the branches of that conditional
 * are obligated to assign a value to that same valueName; therefore, we will encounter the new
 * valueName first in the initial branch. The "obligation" for all the following branches of the
 * conditional statement is recorded as a "delegation" in the <code>delegatedValueNames</code> set
 * of the corresponding initial branch.
 * <p>
 * This kind of obligation can be created in the initial branch even when the assignment to a new
 * valueName happens in a nested conditional statement. So when we assign to a new valueName in an
 * initial branch, we need to check <em>enclosing</em> scopes and set the delegation in every
 * enclosing <code>InitialConditionalBranchScope</code> until we run out of enclosing scopes in the
 * executable, or until we find an enclosing {@link FollowingConditionalBranchScope}. We can stop at
 * a following scope because its corresponding initial scope will have already created the
 * delegation/obligation in its enclosing scopes, as we just described.
 * <p>
 * So, often, we will be left sitting at an enclosing following scope, and in that case it turns out
 * there will be more to do. This is because nested conditional statements under following branches
 * can fulfill that branch's obligations. To see this, let's start with the
 * <code>delegatedValueNames</code> set from the initial branch. Each corresponding following branch
 * gets a copy of that set, which it calls <code>obligatedValueNames</code>, and it records meeting
 * its obligations by removing valueNames from its copy of the set. When an assignment is made in
 * the following branch to a valueName, it fulfills the obligation for that valueName; however, this
 * obligation may also be fulfilled by a nested conditional statement in our following branch with
 * the assignment in all of its branches. So, when we are searching upwards from an initial branch
 * assignment, the assignment may be to a valueName fulfilling an obligation of a following branch.
 * Therefore, we remove the valueName from the <code>obligatedValueNames</code> of the following
 * branch where the search stops.
 * @param firstScope the starting scope for the upward search of enclosing scopes
 * @param valueName  the valueName that was assigned a value inside an initial branch of a
 *                    conditional statement
 * @param currentValueName */
public void setDeligationObligationForEnclosingScopes(InitialConditionalBranchScope firstScope,
                                                      String valueName, String currentValueName) {
  Scope s;
  for (s = firstScope; notAnEnclosingFollowingScope(s); s = s.getParent())
    if (s instanceof InitialConditionalBranchScope)
      ((InitialConditionalBranchScope)s).delegateInScope(valueName, currentValueName);

  if (s instanceof FollowingConditionalBranchScope)
    ((FollowingConditionalBranchScope)s).removeAnyObligationOnValueName(valueName);
}

boolean notAnEnclosingFollowingScope(Scope s) {
  return ! (s instanceof FollowingConditionalBranchScope) && s.scopeIsStillInExecutable();
}

/** Search up through ancestor scopes to find the nearest one that is a
 * {@link FollowingConditionalBranchScope}.
 * <p>
 * @precondition There is an enclosing following scope, possibly the currentScope. Will generate a
 *               runtime cast error if there is not one.
 * @return closest following scope ancestor */
private FollowingConditionalBranchScope getEnclosingFollowingScope(Token valueNameToken) {
  Scope trialScope = currentScope;
  while( ! (trialScope instanceof FollowingConditionalBranchScope) )
    trialScope = trialScope.getParent();
  FollowingConditionalBranchScope followingScope = (FollowingConditionalBranchScope)trialScope;
  return followingScope;
}

/** Search up through ancestor scopes to find the nearest one that is an
 * {@link InitialConditionalBranchScope}.
 * <p>
 * @precondition There is an enclosing initial scope, possibly the currentScope. Will generate a
 *               runtime cast error if there is not one.
 * @return closest first scope ancestor */
private InitialConditionalBranchScope getEnclosingInitialScope(Token valueNameToken) {
  Scope trialScope = currentScope;
  while( ! (trialScope instanceof InitialConditionalBranchScope) )
    trialScope = getScopeParent(valueNameToken, trialScope);
  return (InitialConditionalBranchScope)trialScope;
}

/**
 * @param valueNameToken
 * @param trialScope
 * @return
 * @throws IllegalStateException
 */
private Scope getScopeParent(Token valueNameToken, Scope trialScope) throws IllegalStateException {
  @Nullable Scope trialScopeParent = trialScope.getParent();
  if (trialScopeParent == null) {
    throw new IllegalStateException(
          "PROGRAMMING ERROR: The branchState variable is "+ branchState
          +", but there is no enclosing InitialConditionalBranchScope "
          + "in the class "+ topTypeName +"for the valuename "+ valueNameToken.getText()
          +"at line "+ valueNameToken.getLine()
          + " column "+valueNameToken.getCharPositionInLine());
  }
  return trialScopeParent;
}

/** Proceed with valueName definition, even if there were errors, in hopes of generating better
 * error messages for the following code */
private void defineTheValueNameRegardlessOfErrors(Token valueNameToken, VarInfo varInfo) {
  varInfo.defineNewValue(valueNameToken);

}

/** check decorated value name for prior definition */
private void checkForPriorDefinitionOfValueName(Token valueNameToken, VarInfo varInfo) {
  String valueName = valueNameToken.getText();
  Integer existingValueLineNum = varInfo.lineOf(valueName);
  final boolean valueAlreadyExists = (existingValueLineNum != null);
  if (valueAlreadyExists)
    errs.collectError( program, valueNameToken, "The value "+ valueName
                      +" has already been defined on line "+ existingValueLineNum);
}

/** The originally coded value name, or perhaps a kludged one to allow catching more error messages.
 */
private String workingValueName(Token valueNameToken) {
  if (isUndecorated(valueNameToken)) {
    errs.collectError( program, valueNameToken,
          valueNameToken.getText() +" is not a decorated value name so it cannot receive a value");
    return kludgedValueName(valueNameToken);
  } else
    return valueNameToken.getText();
}

/** A value name generated purely in hopes of helping to generate additional helpful error messages
 */
private String kludgedValueName(Token valueNameToken) {
  return "'" + $T$ +  variableName(valueNameToken);
}

/** Check to see if this variable, from the valueNameToken, was already assigned a final value,
 * which is held in the varInfo. If so, we issue an error
 * message but do not stop processing the valueName assignment. Instead we proceed with error
 * checking using the new value name in hopes of finding more errors.
 */
private void checkForAlreadyFinalValue(Token valueNameToken, VarInfo varInfo) {
  // two quick checks to get out fast
  if (branchState == BranchState.FollowingBranch
              //the valueNames are already tested for alignment with the first branch
   || isFinalDecorated(valueNameToken)
              // the error is caught elsewhere with a better message
     )
    return;

  final String currentValueName = varInfo.getCurrentValueName();
  if (! isAlreadyFinallyDecorated(currentValueName))
    return;

  String valueName = valueNameToken.getText();
  Integer definitionLine = varInfo.lineOf(currentValueName);
  if (definitionLine == null)
    return;

  if (definitionLine.intValue() == valueNameToken.getLine())
    /* we are in the error condition where the varInfo did not exist,
     * but was created for this currentValueName token as a kludge,
     * and an error message of a different type was already issued */
    return;

  String varName = variableName(valueNameToken);

  Scope ancestor = currentScope;
  while (! ancestor.isTopLevelScope()) {
    Optional<VarInfo> existingVarInfo = ancestor.getOptionalExistingVarInfo(varName);
    if (existingVarInfo.isPresent())
      ancestor = ancestor.parent;
  }

  Scope varInfoScope = currentScope.getVariableDeclarationScope(varName);
  errs.collectError( program, valueNameToken,
                     varName +" in scope "+ varInfoScope
                     +" was final decorated at line "+ varInfo.lineOf(currentValueName)
                     +", so it cannot receive a new value in scope: "+ currentScope);
}


private boolean followingBranchVariable(String valueName) {
  if (branchState == BranchState.FollowingBranch) {
    FollowingConditionalBranchScope followingBranch = (FollowingConditionalBranchScope)currentScope;
    if (followingBranch.getNestedValueNames().contains(valueName))
      return true;
  }

  return false;
}

private VarInfo ensureVarInfo(Token valueNameToken) {
  Optional<VarInfo> OptVar = currentScope.getOptionalExistingVarInfo(variableName(valueNameToken));
  if ( isMissing(OptVar) ) {
    issueUndefinedVariableError(valueNameToken);
    OptVar = currentScope.declareVarName(valueNameToken,
                                         "UnknownType_ForUndeclaredVariable"+ $T$);
  }
  return OptVar.get();
}

private boolean isMissing(Optional<?> OptVar) {
  return ! OptVar.isPresent();
}

private boolean isAlreadyFinallyDecorated(String currentValueName) {
  boolean hasCurrentValue = (currentValueName != null);
  return hasCurrentValue && isFinalDecorated(currentValueName);
}

private void checkReference(T_identifierContext ctx) {
  final Token valueNameToken = ctx.getStart();
  String valueName = valueNameToken.getText();
  final String varName = variableName(valueName);
  Optional<VarInfo> optionalVarInfo = currentScope.getOptionalExistingVarInfo(varName);
  if (optionalVarInfo.isPresent()) {
    VarInfo varInfo = optionalVarInfo.get();
    if (varInfo.hasDefinedValue(valueName))
      checkForReusingAnOverwrittenValue(valueName, varInfo);
    else
      errorAndRecoveryForReferenceToUndefinedValue(valueNameToken, varInfo);
  } else {
    recoverFromMissingVariable(valueNameToken);
  }
}
/**
 * @param valueName
 * @param varInfo
 */
private void checkForReusingAnOverwrittenValue(String valueName, VarInfo varInfo) {
  if ( reusingAPreviousValueName(valueName, varInfo)) {
      if (isInExecutable && ! isInLogic) {
        varInfo.reusedValueNames.add(valueName);
      }
  }
}
/**
 * @param valueName
 * @param varInfo
 * @return
 */
private boolean reusingAPreviousValueName(String valueName, VarInfo varInfo) {
  return ! valueName.equals(varInfo.getCurrentValueName());
}

private void errorAndRecoveryForReferenceToUndefinedValue(Token valueNameToken, VarInfo varInfo) {
  if (isDecorated(valueNameToken))
    issueUndefinedValueNameMsg(valueNameToken, varInfo);
  else
    issueUndecoratedMsg(valueNameToken);
  defineTheValueNameRegardlessOfErrors(valueNameToken, varInfo);
}

private void issueUndefinedValueNameMsg(Token valueNameToken, VarInfo varInfo) {
  errs.collectError( program, valueNameToken, "Value "+ valueNameToken.getText()
                      +" has not been defined for the variable "+ variableName(valueNameToken)
                      +" that was declared in scope "+ varInfo.getScopeWhereDeclared());
}

/** We generate the missing VarInfo and make sure that it has some current value decoration, hoping
 * that this will result in generating better error messages in the following code.
 * <p>
 * ASSUMES: the variable for the valueNameToken has not been declared yet
 *  @return A dummy VarInfo for the non-existent variable
 */
private VarInfo recoverFromMissingVariable(Token valueNameToken) {
  issueUndefinedVariableError(valueNameToken);
  if (isUndecorated(valueNameToken))
    issueUndecoratedMsg(valueNameToken);
  return kludgeVariableDeclaration(valueNameToken);
}
/**
 * @param valueNameToken
 */
private void issueUndefinedVariableError(Token valueNameToken) {
  errs.collectError( program, valueNameToken,
        "Variable "+variableName(valueNameToken)+" has not been defined in this scope");
}

/**
 * @param valueNameToken
 * @return
 */
private VarInfo kludgeVariableDeclaration(Token valueNameToken) {
  return currentScope.declareVarName(valueNameToken, "NoTypeForUndeclaredReference").get();
}

private void issueUndecoratedMsg(Token valueNameToken) {
  String undecoratedMsg = "A reference to a value must be a value name: "
                          + valueNameToken.getText() +" must be decorated";
  errs.collectError(program, valueNameToken, undecoratedMsg);
}

String checkedText(TerminalNode id) {
  checkForReservedChars(id.getSymbol());
  return id.getText();
}

private void checkForReservedChars(final Token idToken) {
  final String id = idToken.getText();
  if (id.contains($T$)) {
    errs.collectError(program, idToken , invalidCharsMsg);
  }
}

//TODO include rest of visit methods for value related code

} // end class FieldVisitor
