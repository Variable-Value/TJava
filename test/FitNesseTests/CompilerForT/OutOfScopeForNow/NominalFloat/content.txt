!1 Parse and generate code for use of a T Float with nominal access from Java
!|t_translator.StartT|
# |{{{}}}|
----
!3 check for float output as _T_float with spaces
|start new T program|
|program code lines|
|{{{class TryOne {                  }}}|
|{{{  float testVar;                }}}|
|{{{  void addOne(float 'x') {        }}}|
|{{{    javalanguage {             }}}|
|{{{      x.nominal=x.nominal+1;    }}}|
|{{{    } // java                   }}}|
|{{{    conjecture .999 {x'.nominal='x.nominal+1;} }}}|
|{{{  } // addOne                   }}}|
|{{{} // class TryOne               }}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|

#|{{{                                                     }}}|
#|{{{  }}}|
#|{{{ }}}|

|Java output|
|code lines|
|{{{class TryOne {                  }}}|
|{{{  _T_float testVar;             }}}|
|{{{  void addOne(_T_float x) { }}}|
|{{{    {                           }}}|
|{{{      x.nominal=x.nominal+1;    }}}|
|{{{    } // java                   }}}|
|{{{    /* conjecture .999 {x'.nominal='x.nominal+1;} */ }}}|
|{{{  } // addOne                   }}}|
|{{{} // class TryOne               }}}|
----
!3 check for float output as _T_float with middleDots
|start new T program|
|program code lines|
|{{{class·TryOne·{··················}}}|
|{{{··float·testVar;················}}}|
|{{{··void·addOne(float·x)·{········}}}|
|{{{····language·java·{·············}}}|
|{{{······x.nominal=x.nominal+1;····}}}|
|{{{····}·//·java···················}}}|
|{{{····conjecture·.999·{x'.nominal='x.nominal+1;}·}}}|
|{{{··}·//·addOne···················}}}|
|{{{}·//·class·TryOne···············}}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|

|Java output|
|code lines|
|{{{class·TryOne·{··················}}}|
|{{{··_T_float·testVar;················}}}|
|{{{··void·addOne(_T_float·x)·{········}}}|
|{{{····{·············}}}|
|{{{······x.nominal=x.nominal+1;····}}}|
|{{{····}·//·java···················}}}|
|{{{····/*·conjecture·.999·{x'.nominal='x.nominal+1}·*/·}}}|
|{{{··}·//·addOne···················}}}|
|{{{}·//·class·TryOne···············}}}|
----
