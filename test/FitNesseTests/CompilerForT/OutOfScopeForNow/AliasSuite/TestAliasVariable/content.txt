!3 When more than one name in a method refers to the same object, we must ensure that all statements made about the objects remain true.

An assignment allows a new name to refer to the value. The prover can use this equivalence to prove facts about both names of the value. Therefore if a new value is assigned as the post-form of one of the names, the implementation must assure that any use of the other name refers to a copy of the original value.

!|t_translator.StartT|
----
!***** !3 OLD CODE TO USE AS TEMPLATE
|start new T program|
|program code lines|
|{{{class OrderedPair {                                                 }}}|
|{{{  private int first;                                                }}}|
|{{{  private int second;                                               }}}|
|{{{                                                                    }}}|
|{{{  // The constructor for the object                                 }}}|
|{{{  OrderedPair(int item_1', int item_2') {                           }}}|
|{{{    first' = item_1';                                               }}}|
|{{{    second' = item_2';                                              }}}|
|{{{  }                                                                 }}}|
|{{{                                                                    }}}|
|{{{  void swap() {                                                     }}}|
|{{{    first' = 'second;                                               }}}|
|{{{    second' = 'first;                                               }}}|
|{{{  }                                                                 }}}|
|{{{} // end class OrderedPair                                          }}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|

!3 Template for generated code.
We can translate to a simple form of Java, because the translator must check for the validity of the
T code anyway.

|Java output|
|code lines|
|{{{class OrderedPair {                                         }}}|
|{{{  private int first;                                        }}}|
|{{{  private int second;                                       }}}|
|{{{                                                            }}}|
|{{{  // The constructor for the object                         }}}|
|{{{  OrderedPair(int item_1/*post*/, int item_2/*post*/) {     }}}|
|{{{    first/*post*/ = item_1/*post*/;                         }}}|
|{{{    second/*post*/ = item_2/*post*/;                        }}}|
|{{{  }                                                         }}}|
|{{{                                                            }}}|
|{{{  void swap(bool keepThis) {                                }}}|
|{{{    if (keepThis) {                                         }}}|
|{{{      final OrderedPair t$pre$t_this = clone(this);         }}}|
|{{{    }                                                       }}}|
|{{{    final int t$pre$t_first = /*pre*/first;                 }}}|
|{{{    first/*post*/ = /*pre*/second;                          }}}|
|{{{    second/*post*/ = t$pre$t_first;                         }}}|
|{{{  }                                                         }}}|
|{{{} // end class OrderedPair                                  }}}|
----
**********!