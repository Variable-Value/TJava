#!contents -R2 -g -p -f -h
!3 Semantic Checks for decorators
Because the value of the iteration variable is always a member of the collection, if it is changed in the process block, the collection as a whole changes; therefore, The decoration of the iteration variable name and the collection name must either both allow changes or both forbid changes. Unfortunately, this ends up looking odd because, while the iteration variable name is being declared in the forall statement, the collection name has almost always been declared earlier. Predecoration in the declration of the iteration value name indicates that it may change and postdecoration indicates that it may not change. When the collection has already been declared, using the same decoration as its last use indicates that it may not change, while using a new decoration indicates that it may. For example, assuming the collection is named 'collection before the forall, we may have 'iterationName and collection' to indicate changes, or perhaps something like 'iterationName and collection'changed. To indicate no changes we must have iterationName' and 'collection.

!|t_translator.StartT|
----
!***** !3 Iteration variable must be decorated
|start new T program|
|program code lines|
|{{{public class BadIterator {                                        }}}|
|{{{                                                                  }}}|
|{{{  private static List<Integer> ints = new ArrayList<Integer>();   }}}|
|{{{                                                                  }}}|
|{{{  public static void fillList(List<Integer> list') {              }}}|
|{{{    for (Integer i : list') {                                     }}}|
|{{{      'ints.add();                                                }}}|
|{{{    }                                                             }}}|
|{{{  }                                                               }}}|
|{{{ }                                                                 }}}|
|{{{ // end class OrderedPair                                         }}}|
|{{{                                                                  }}}|

!|check|result of parse|OK|
|check|semantic errors|Semantic error in FitNesse test at line 6:15 rule forstatement failed predicate: {shouldBeDecoratedInTProcess($iterationID.text)}?. Semantic error in FitNesse test at line 6:22 no viable alternative at input ')'. Semantic error in FitNesse test at line 0:0 mismatched tree node: UP expecting RBRACE. Semantic error in FitNesse test at line 10:0 mismatched tree node: } expecting EOF.|

**********!
!***** !3 Collection name must be decorated
|start new T program|
|program code lines|
|{{{public class BadIterator {                                        }}}|
|{{{                                                                  }}}|
|{{{  private static List<Integer> ints = new ArrayList<Integer>();   }}}|
|{{{                                                                  }}}|
|{{{  public static void fillList(List<Integer> list') {              }}}|
|{{{    for (Integer i' : list) {                                     }}}|
|{{{      'ints.add(i');                                                }}}|
|{{{    }                                                             }}}|
|{{{  }                                                               }}}|
|{{{ }                                                                 }}}|
|{{{ // end class OrderedPair                                         }}}|
|{{{                                                                  }}}|

!|check|result of parse|OK|
|check|semantic errors|Semantic error in FitNesse test at line 6:22 rule primary failed predicate: { thePreviousIdentifierMustBeDecorated }?.|

**********!
!***** !3 If content of iteration name can change, then collection name must change
If the iteration name is predecorated to show that it's value can change, the collection name is required to indicate that it can change; therefore it must have a new value name.

|start new T program|
|program code lines|
|{{{public class BadIterator {                                        }}}|
|{{{                                                                  }}}|
|{{{  private static List<Integer> ints = new ArrayList<Integer>();   }}}|
|{{{                                                                  }}}|
|{{{  public static void fillList(List<Integer> 'list) {              }}}|
|{{{    for (Integer 'i : 'list) {                                    }}}|
|{{{      'ints.add('i);                                              }}}|
|{{{    }                                                             }}}|
|{{{  }                                                               }}}|
|{{{ }                                                                }}}|
|{{{ // end class OrderedPair                                         }}}|
|{{{                                                                  }}}|

!|check|result of parse|OK|
|check|semantic errors|OK|
#|check|semantic errors|Semantic error in FitNesse test at line 6:23 rule primary failed predicate: {vnm.theValueNameMayBeUpdated()}?. Semantic error in FitNesse test at line 7:12 rule primary failed predicate: {vnm.thisValueNameIsStillAvailable()}?. Semantic error in FitNesse test at line 0:0 mismatched tree node: UP expecting RBRACE. Semantic error in FitNesse test at line 10:0 mismatched tree node: } expecting EOF.|

**********!
!***** !3 Valid example of no changes to the collection, then changes.
|start new T program|
|program code lines|
|{{{public class BadIterator {                                        }}}|
|{{{                                                                  }}}|
|{{{  private static List<Integer> ints = new ArrayList<Integer>();   }}}|
|{{{                                                                  }}}|
|{{{  public static void fillList(List<Integer> 'list) {              }}}|
|{{{    for (Integer i': 'list) {                                     }}}|
|{{{      'ints.add(i');                                              }}}|
|{{{    }                                                             }}}|
|{{{  }                                                               }}}|
|{{{                                                                  }}}|
|{{{  public static void changeList(List<List<Integer>> 'list) {      }}}|
|{{{    for (Integer 'i : list') {                                    }}}|
|{{{      i'.addOne().rewrite();                                      }}}|
|{{{    }                                                             }}}|
|{{{  }                                                               }}}|
|{{{ }                                                                }}}|
|{{{ // end class OrderedPair                                         }}}|

|check|result of parse|OK|
|check|semantic errors|OK|

**********!