!1 Simple code generation
!|t_translator.StartT|
----
!***** !3 Here we check a program without detailed whitespace checking
|start new T program|
|program code lines|
|{{{/* test case */        }}}|
|{{{class TryOne {           }}}|
|{{{  boolean aTest;         }}}|
|{{{} // end class TryOne    }}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|
#|check|java compile   |OK|

|Generated Java lines|
|code lines|
|{{{/* test case */        }}}|
|{{{class TryOne {           }}}|
|{{{  boolean aTest;         }}}|
|{{{} // end class TryOne    }}}|
----
**********!
!***** !3 Here we are checking for spacing so we must use bullets instead of spaces "·"
Normally, we won't bother with checking the exact number of spaces to use, but the bullets are available when checking whitespace is important.

|start new T program|
|program code lines|
|{{{/*·comment1·*/········}}}|
|{{{···class·TryOne·{·····}}}|
|{{{·····boolean·testVar;·}}}|
|{{{···}··················}}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|
#|check|java compile   |OK|

|Generated Java lines with dots|
|code lines|
|{{{/*·comment1·*/········}}}|
|{{{···class·TryOne·{·····}}}|
|{{{·····boolean·testVar;·}}}|
|{{{···}··················}}}|
----
**********!
!***** !3 Dots in the T code requires us to use dots in the output code lines at all internal positions
|start new T program|
|program code lines|
|{{{/* comment1 */        }}}|
|{{{···class TryOne {     }}}|
|{{{     boolean testVar; }}}|
|{{{   }                  }}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|
#|check|java compile   |OK|

|Generated Java lines with dots|
|code lines|
|{{{/*·comment1·*/        }}}|
|{{{···class·TryOne·{     }}}|
|{{{boolean·testVar;      }}}|
|{{{   }                  }}}|
However, you are allowed to leave off a line's trailing dots.
----
**********!
!***** !3 Here we show that the input program needs leading bullets if any bullets are present
|start new T program|
|program code lines|
|{{{/*·comment1·*/········}}}|
|{{{   class·TryOne·{·····}}}|
|{{{·····boolean·testVar;·}}}|
|{{{···}··················}}}|

|check|result of parse|OK|
|check|semantic errors|OK|
|check|java generation|OK|
#|check|java compile   |OK|

|Generated Java lines with dots|
|code lines|
|{{{/*·comment1·*/········}}}|
|{{{class·TryOne·{·····}}}|
|{{{·····boolean·testVar;·}}}|
|{{{···}··················}}}|
----
**********!